# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  image: docker:19.03-git
  services:
    - docker:dind
  variables:
    DOCKER_TOKEN: $DOCKER_REGISTRY_TOKEN
  stage: build
  script:
    - echo "Building Docker image..."
    - echo $DOCKER_REGISTRY | docker login -u $CI_REGISTRY_USER --password-stdin devops.telecomste.fr:5050
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_TOKEN devops.telecomste.fr:5050
    - docker build -t devops.telecomste.fr:5050/printerfaceadmin/2023-24/group1/interface/mon_app:$CI_COMMIT_REF_SLUG . 
    - docker push devops.telecomste.fr:5050/printerfaceadmin/2023-24/group1/interface/mon_app:$CI_COMMIT_REF_SLUG

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    #- docker run -i -p 8080:8000 image_runner
    #Comparer au fichier de "agent" qui explique.
    - echo "Application successfully deployed."

